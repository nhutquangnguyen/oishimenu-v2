"use client"

import React, { createContext, useContext, useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'

interface AuthContextType {
  user: any | null
  userData: any | null
  loading: boolean
  signInWithGoogle: () => Promise<void>
  logout: () => Promise<void>
}

const AuthContext = createContext<AuthContextType>({} as AuthContextType)

export const useAuth = () => {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}

export function FirebaseAuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<any>(null)
  const [userData, setUserData] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [firebaseLoaded, setFirebaseLoaded] = useState(false)
  const router = useRouter()

  // Dynamically import Firebase to avoid SSR issues
  const initializeFirebase = async () => {
    // Check if Firebase is disabled before trying to initialize
    if (process.env.NEXT_PUBLIC_FIREBASE_DISABLED === 'true') {
      console.log('Firebase is disabled, using mock authentication')
      setFirebaseLoaded(false)
      setLoading(false)
      return undefined
    }

    try {
      // Import Firebase modules dynamically
      const { auth, db } = await import('@/lib/firebase')

      // Check if auth is available
      if (!auth) {
        throw new Error('Firebase auth not available')
      }

      const {
        onAuthStateChanged,
        GoogleAuthProvider,
        signInWithPopup,
        signInWithRedirect,
        getRedirectResult,
        signOut
      } = await import('firebase/auth')
      const { doc, getDoc, setDoc, serverTimestamp } = await import('firebase/firestore')

      setFirebaseLoaded(true)

      // Create user document in Firestore
      const createUserDocument = async (user: any) => {
        try {
          if (db) {
            const userRef = doc(db, 'users', user.uid)
            const userDoc = await getDoc(userRef)

            if (!userDoc.exists()) {
              await setDoc(userRef, {
                uid: user.uid,
                email: user.email,
                name: user.displayName || '',
                photoURL: user.photoURL || '',
                role: 'merchant',
                provider: 'google',
                createdAt: serverTimestamp(),
                updatedAt: serverTimestamp(),
              })
            }

            const updatedUserDoc = await getDoc(userRef)
            if (updatedUserDoc.exists()) {
              setUserData(updatedUserDoc.data())
              return
            }
          }

          // Fallback: set user data from auth user if Firestore is unavailable
          setUserData({
            uid: user.uid,
            email: user.email,
            name: user.displayName || '',
            photoURL: user.photoURL || '',
            role: 'merchant',
            provider: 'google',
          })
        } catch (error: any) {
          console.error('Error creating user document:', error)
          // Fallback: set user data from auth user if Firestore fails
          setUserData({
            uid: user.uid,
            email: user.email,
            name: user.displayName || '',
            photoURL: user.photoURL || '',
            role: 'merchant',
            provider: 'google',
          })
        }
      }

      // Hybrid Google sign-in: Try popup first, fallback to redirect
      const handleGoogleSignIn = async () => {
        const provider = new GoogleAuthProvider()
        provider.addScope('email')
        provider.addScope('profile')

        console.log('üöÄ Starting Google authentication...')
        console.log('   Current URL:', window.location.href)
        console.log('   Current domain:', window.location.hostname)

        // Check if we're already in a redirect flow
        if (sessionStorage.getItem('pendingGoogleAuth') === 'true') {
          console.log('‚è≥ Authentication already in progress, skipping...')
          return
        }

        // Try popup first (more reliable when it works)
        let popupFailed = false
        try {
          console.log('üöÄ Attempting Google sign-in with popup...')

          const result = await signInWithPopup(auth, provider)
          console.log('‚úÖ Popup authentication successful:', result.user.email)
          await createUserDocument(result.user)
          router.push('/dashboard')
          return
        } catch (popupError: any) {
          popupFailed = true
          console.log('‚ö†Ô∏è Popup failed:', popupError.code || popupError.message)

          // Provide specific guidance for unauthorized domain error
          if (popupError.code === 'auth/unauthorized-domain') {
            console.error('üö® UNAUTHORIZED DOMAIN ERROR')
            console.error('   Current domain:', window.location.hostname)
            console.error('   ‚Üí This domain must be added to Firebase Console authorized domains')
            console.error('   ‚Üí Go to: https://console.firebase.google.com/project/oishimenu-g-c6fd5/authentication/settings')
            throw new Error('Domain not authorized. Please configure Firebase authorized domains.')
          }

          // Check for COOP-related errors (broader detection)
          const isCOOPError = popupError.code === 'auth/popup-blocked' ||
                             popupError.code === 'auth/popup-closed-by-user' ||
                             popupError.code === 'auth/cancelled-popup-request' ||
                             popupError.message?.includes('Cross-Origin-Opener-Policy') ||
                             popupError.message?.includes('window.closed')

          if (isCOOPError) {
            console.log('üîÑ COOP policy detected, falling back to redirect authentication...')

            try {
              console.log('   Redirect will take user to Google, then back to:', window.location.origin)

              // Set flag to track that we're expecting a redirect result
              sessionStorage.setItem('pendingGoogleAuth', 'true')

              await signInWithRedirect(auth, provider)
              console.log('‚úÖ Redirect initiated successfully - user will be redirected to Google')
              return
            } catch (redirectError: any) {
              console.error('‚ùå Both popup and redirect failed:', redirectError)
              sessionStorage.removeItem('pendingGoogleAuth')

              if (redirectError.code === 'auth/unauthorized-domain') {
                console.error('üö® UNAUTHORIZED DOMAIN ERROR in redirect')
                console.error('   ‚Üí Firebase authorized domains must include:', window.location.hostname)
                throw new Error('Domain not authorized for redirects. Please configure Firebase authorized domains.')
              }

              throw new Error(getAuthErrorMessage(redirectError.code))
            }
          } else {
            // For other popup errors, throw immediately
            console.error('‚ùå Popup authentication failed:', popupError)
            throw new Error(getAuthErrorMessage(popupError.code))
          }
        }
      }

      // Handle redirect result after user returns from Google auth
      const handleRedirectResult = async () => {
        try {
          console.log('üîç Checking for redirect result...')
          const result = await getRedirectResult(auth)
          console.log('üîç Redirect result:', result)

          if (result && result.user) {
            console.log('‚úÖ User found in redirect result:', result.user.email)
            await createUserDocument(result.user)
            console.log('‚úÖ Redirecting to dashboard...')
            router.push('/dashboard')
          } else {
            console.log('‚ÑπÔ∏è No redirect result found')

            // Check if we expected a redirect (came from Google auth)
            if (typeof window !== 'undefined') {
              const urlParams = new URLSearchParams(window.location.search)
              const hasAuthParams = urlParams.has('code') || urlParams.has('error') ||
                                   window.location.pathname === '/login'

              if (hasAuthParams || sessionStorage.getItem('pendingGoogleAuth')) {
                console.error('üö® REDIRECT AUTHENTICATION FAILED')
                console.error('   Expected: User data from Google redirect')
                console.error('   Actual: Redirect result is null')
                console.error('   üîß SOLUTION: Configure Firebase authorized domains')
                console.error('   üìã Go to: https://console.firebase.google.com/project/oishimenu-g-c6fd5/authentication/settings')
                console.error('   ‚ûï Add domains: localhost, 127.0.0.1, oishimenu.com, merchant.oishimenu.com')

                // Clear the pending auth flag
                sessionStorage.removeItem('pendingGoogleAuth')
              }

              if (urlParams.has('error')) {
                console.warn('‚ö†Ô∏è Error parameter found in URL:', urlParams.get('error'))
              }
            }
          }
        } catch (error: any) {
          console.error('‚ùå Redirect result error:', error)

          // Provide specific error handling for common issues
          if (error.code === 'auth/unauthorized-domain') {
            console.error('üö® UNAUTHORIZED DOMAIN ERROR: This domain is not authorized in Firebase Console')
            console.error('   ‚Üí Go to Firebase Console ‚Üí Authentication ‚Üí Settings ‚Üí Authorized domains')
            console.error('   ‚Üí Add your domain to the authorized domains list')
          } else if (error.code === 'auth/operation-not-allowed') {
            console.error('üö® OPERATION NOT ALLOWED: Google sign-in is not enabled in Firebase Console')
            console.error('   ‚Üí Go to Firebase Console ‚Üí Authentication ‚Üí Sign-in method ‚Üí Google ‚Üí Enable')
          }

          // Handle error but don't throw, as this runs on every page load
        }
      }

      // Logout
      const handleLogout = async () => {
        try {
          await signOut(auth)
          setUser(null)
          setUserData(null)
          router.push('/')
        } catch (error: any) {
          throw new Error('ƒêƒÉng xu·∫•t th·∫•t b·∫°i')
        }
      }

      // Set auth functions
      window.__authFunctions = {
        signInWithGoogle: handleGoogleSignIn,
        logout: handleLogout
      }

      // Check for redirect result on app load
      await handleRedirectResult()

      // Monitor auth state changes
      const unsubscribe = onAuthStateChanged(auth, async (user) => {
        console.log('üîÑ Auth state changed:', user ? `User: ${user.email}` : 'No user')
        setUser(user)
        if (user) {
          console.log('üë§ Creating user document for:', user.email)
          await createUserDocument(user)
        } else {
          console.log('üë§ No user, clearing user data')
          setUserData(null)
        }
        setLoading(false)
        console.log('‚úÖ Auth state change processed, loading set to false')
      })

      return unsubscribe
    } catch (error) {
      console.error('Firebase initialization error:', error)
      console.log('Falling back to mock authentication mode')
      setFirebaseLoaded(false)
      setLoading(false)

      // If Firebase fails, we still provide mock auth functionality
      return undefined
    }
  }

  // Get user-friendly error messages
  const getAuthErrorMessage = (errorCode: string): string => {
    switch (errorCode) {
      case 'auth/popup-closed-by-user':
      case 'auth/cancelled-popup-request':
        return 'ƒêƒÉng nh·∫≠p b·ªã h·ªßy'
      case 'auth/popup-blocked':
        return 'Popup b·ªã ch·∫∑n, vui l√≤ng ki·ªÉm tra tr√¨nh duy·ªát'
      case 'auth/redirect-cancelled-by-user':
        return 'ƒêƒÉng nh·∫≠p b·ªã h·ªßy'
      case 'auth/redirect-operation-pending':
        return 'ƒêang x·ª≠ l√Ω ƒëƒÉng nh·∫≠p, vui l√≤ng ch·ªù'
      case 'auth/unauthorized-domain':
        return 'Domain ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong Firebase Console'
      case 'auth/operation-not-allowed':
        return 'Ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p Google ch∆∞a ƒë∆∞·ª£c b·∫≠t'
      case 'auth/account-exists-with-different-credential':
        return 'T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i v·ªõi ph∆∞∆°ng th·ª©c ƒëƒÉng nh·∫≠p kh√°c'
      case 'auth/network-request-failed':
        return 'L·ªói k·∫øt n·ªëi m·∫°ng'
      case 'auth/user-disabled':
        return 'T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a'
      case 'auth/user-not-found':
        return 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i'
      case 'auth/invalid-email':
        return 'Email kh√¥ng h·ª£p l·ªá'
      case 'auth/too-many-requests':
        return 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau'
      default:
        return 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i'
    }
  }

  // Mock functions for when Firebase isn't loaded
  const signInWithGoogle = async () => {
    if (firebaseLoaded && window.__authFunctions) {
      return window.__authFunctions.signInWithGoogle()
    } else {
      // Fallback mock auth
      setLoading(true)
      await new Promise(resolve => setTimeout(resolve, 1000))

      const mockUser = {
        uid: 'mock-user-123',
        email: 'demo@oishimenu.com',
        displayName: 'Demo User',
        photoURL: null
      }

      setUser(mockUser)
      setUserData({ ...mockUser, role: 'merchant' })
      setLoading(false)
      router.push('/dashboard')
    }
  }

  const logout = async () => {
    if (firebaseLoaded && window.__authFunctions) {
      return window.__authFunctions.logout()
    } else {
      setUser(null)
      setUserData(null)
      router.push('/')
    }
  }

  useEffect(() => {
    let unsubscribe: (() => void) | undefined

    // Initialize Firebase only on client side
    if (typeof window !== 'undefined') {
      console.log('üî• Initializing Firebase...')
      initializeFirebase().then((unsub) => {
        unsubscribe = unsub
        console.log('üî• Firebase initialization complete')
      })
    } else {
      setLoading(false)
    }

    return () => {
      if (unsubscribe) {
        unsubscribe()
      }
    }
  }, [])

  const value = {
    user,
    userData,
    loading,
    signInWithGoogle,
    logout
  }

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  )
}

// Type declarations for global auth functions
declare global {
  interface Window {
    __authFunctions?: {
      signInWithGoogle: () => Promise<void>
      logout: () => Promise<void>
    }
  }
}